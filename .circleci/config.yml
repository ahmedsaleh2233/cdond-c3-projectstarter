version: 2.1

commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID..
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>
         
            
jobs:
   build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
               cd frontend
               sudo npm install
               sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

   build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
               cd backend
               sudo npm install
               sudo npm run build            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

   test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
           keys: [frontend-build]
       - run:
           name: test front-end
           command: |
              cd frontend
              npm install
              npm run test
   test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
           keys: [backend-build]
       - run:
           name: test back-end
           command: |
              cd backend
              npm install
              npm run test 

   scan-frontend:
     docker:
      - image: circleci/node:13.8.0
     steps:
       - checkout
       - restore_cache:
           keys: [frontend-build]
       - run:
           name: scan front-end
           command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

 
   scan-backend:
     docker:
      - image: circleci/node:13.8.0
     steps:
      
       - checkout
       - restore_cache:
           keys: [backend-build]
       - run:
           name: scan back-end
           command: |
              cd backend
              npm install
              npm install --save-dev ts-loader@9.2.6
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical                    
          

   deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
          
      - run:
          name: Ensure back-end infrastructure exists
          command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=your-tag \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                
         
      - run:
          name: Run Playbook and Configure server
          command: |
            cd ansible
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory
      - persist_to_workspace:
          root: ansible
          paths:
            - inventory.txt
                 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --tags project=your-tag \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
               
                
   configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["29:5d:81:13:dd:c2:b5:72:1b:d8:ce:e3:55:04:34:38"] # SSH Key
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
            
      # Here's where you will add some code to rollback on failure      

   run-migrations:
    docker:
     - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      
 
  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]

      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]        
      
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      #- deploy-frontend:
          #requires: [run-migrations]
      #- deploy-backend:
          #requires: [run-migrations]
      #- smoke-test:
         # requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
          #requires: [smoke-test]
      #- cleanup:
         # requires: [cloudfront-update]
